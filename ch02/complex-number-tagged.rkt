#lang racket

(require "../base/math.rkt")

(define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1) (real-part z2))
                         (+ (imag-part z1) (imag-part z2))))
(define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2))
                         (- (imag-part z1) (imag-part z2))))
(define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                       (+ (angel z1) (angel z2))))
(define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                       (- (angel z1) (angel z2))))

(define (make-from-real-imag x y) (make-from-real-imag-rectangular x y))
(define (make-from-mag-ang r a) (make-from-mag-ang-polar r a))
(define (real-part z)
    (cond ((rectangular? z) (real-part-rectangular z))
          ((polar? z) (real-part-polar z))
          (else (error "Unknown type: REAL-PART" z))))
(define (imag-part z)
    (cond ((rectangular? z) (imag-part-rectangular z))
          ((polar? z) (imag-part-polar z))
          (else (error "Unknown type: IMAG-PART" z))))
(define (magnitude z)
    (cond ((rectangular? z) (magnitude-rectangular z))
          ((polar? z) (magnitude-polar z))
          (else (error "Unknown type: MAGNITUDE" z))))
(define (angel z)
    (cond ((rectangular? z) (angel-rectangular z))
          ((polar? z) (angel-polar z))
          (else (error "Unknown type: ANGEL" z))))

(define (make-from-real-imag-rectangular x y)
    (attach-tag 'rectangular (cons x y)))
(define (make-from-mag-ang-rectangular r a)
    (attach-tag 
        'rectangular
        (cons (* r (cos a))
              (* r (sin a)))))
(define (real-part-rectangular z) (car (contents z)))
(define (imag-part-rectangular z) (cdr (contents z)))
(define (magnitude-rectangular z) 
    (sqrt (+ (square (real-part-rectangular z)) 
             (square (imag-part-rectangular z)))))
(define (angel-rectangular z) 
    (atan (imag-part-rectangular z) 
          (real-part-rectangular z)))

(define (make-from-real-imag-polar x y)
    (attach-tag 
        'polar
        (cons (sqrt (+ (square x) (square y)))
              (atan y x))))
(define (make-from-mag-ang-polar r a)
    (attach-tag 'polar (cons r a)))
(define (real-part-polar z) 
    (* (magnitude-polar z) 
       (cos (angel-polar z))))
(define (imag-part-polar z) 
    (* (magnitude-polar z) 
       (sin (angel-polar z))))
(define (magnitude-polar z) (car (contents z)))
(define (angel-polar z) (cdr (contents z)))

(define (attach-tag type-tag contents) 
    (cons type-tag contents))
(define (type-tag z) (car z))
(define (contents z) (cdr z))
(define (rectangular? z)
    (eq? (type-tag z) 'rectangular))
(define (polar? z)
    (eq? (type-tag z) 'polar))

(module+ main
    (define sum     
        (add-complex
            (make-from-real-imag 3 4)
            (make-from-real-imag 5 6)))
    (define diff
        (sub-complex
            (make-from-mag-ang 5 45)
            (make-from-real-imag 3 4)))
    (display "sum: ")
    (display (real-part sum)) 
    (display " ") 
    (display (imag-part sum)) 
    (newline)
    (display "diff: ")
    (display (real-part diff)) 
    (display " ")
    (display (imag-part diff)))