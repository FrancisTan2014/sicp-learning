#lang racket

(define (deriv exp var)
    (cond ((number? exp) 0)
          ((variable? exp) (if (same-variable? exp var) 1 0))
          ((sum? exp) (make-sum (deriv (addend exp) var)
                                (deriv (augend exp) var)))
          ((product? exp) 
            (make-sum
                (make-product (mutiplier exp)
                              (deriv (mutiplicand exp) var))
                (make-product (deriv (mutiplier exp) var)
                              (mutiplicand exp))))
          (else (error "unknown expression type: DERIV" exp))))

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
    (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (sum? x) (and (pair? x) (eq? (cadr x) '+)))
(define (product? x) (and (pair? x) (eq? (cadr x) '*)))
(define (addend x) (car x))
(define (augend x) (caddr x))
(define (mutiplier x) (car x))
(define (mutiplicand x) (caddr x))
(define (=number? x num) (and (number? x) (= x num)))
(define (make-sum x y)
    (cond ((and (number? x) (number? y)) (+ x y))
          ((=number? x 0) y)
          ((=number? y 0) x)
          (else (list x '+ y))))
(define (make-product x y)
    (cond ((and (number? x) (number? y) (* x y)))
          ((or (=number? x 0) (=number? y 0)) 0)
          ((=number? x 1) y)
          ((=number? y 1) x)
          (else (list x '* y))))

(module+ main
    (deriv '(x + (3 * (x + (y + 2)))) 'x))
